package com.payflow.gateway.security;

import com.payflow.gateway.entity.MerchantEntity;
import com.payflow.gateway.repository.MerchantRepository;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.autoconfigure.web.servlet.AutoConfigureWebMvc;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;
import org.springframework.test.web.servlet.MockMvc;
import org.springframework.test.web.servlet.setup.MockMvcBuilders;
import org.springframework.web.context.WebApplicationContext;
import org.mockito.Mock;

import static org.mockito.Mockito.when;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.get;
import static org.springframework.test.web.servlet.request.MockMvcRequestBuilders.post;
import static org.springframework.test.web.servlet.result.MockMvcResultMatchers.*;
import static org.springframework.security.test.web.servlet.setup.SecurityMockMvcConfigurers.springSecurity;

import java.util.Optional;

@SpringBootTest
@AutoConfigureWebMvc
@ActiveProfiles("test")
public class SecurityIntegrationTest {

    @Autowired
    private WebApplicationContext context;
    
    @Mock
    private MerchantRepository merchantRepository;
    
    @Mock
    private JwtService jwtService;
    
    private MockMvc mockMvc;
    
    @BeforeEach
    void setUp() {
        mockMvc = MockMvcBuilders
            .webAppContextSetup(context)
            .apply(springSecurity())
            .build();
    }
    
    @Test
    public void testUnauthenticatedAccessShouldBeRejected() throws Exception {
        mockMvc.perform(get("/api/v1/payments/12345"))
            .andExpect(status().isUnauthorized());
    }
    
    @Test
    public void testValidApiKeyShouldBeAccepted() throws Exception {
        // Arrange
        MerchantEntity merchant = new MerchantEntity();
        merchant.setId("test-merchant-1");
        merchant.setName("Test Merchant");
        merchant.setApiKey("test-api-key");
        merchant.setStatus("ACTIVE");
        
        when(merchantRepository.findByApiKey("test-api-key"))
            .thenReturn(Optional.of(merchant));
        
        // Act & Assert
        mockMvc.perform(get("/api/v1/merchants/test-merchant-1")
                .header("X-API-Key", "test-api-key"))
            .andExpect(status().isOk());
    }
    
    @Test
    public void testInvalidApiKeyShouldBeRejected() throws Exception {
        // Arrange
        when(merchantRepository.findByApiKey("invalid-key"))
            .thenReturn(Optional.empty());
        
        // Act & Assert
        mockMvc.perform(get("/api/v1/merchants/test-merchant-1")
                .header("X-API-Key", "invalid-key"))
            .andExpect(status().isUnauthorized());
    }
    
    @Test
    public void testValidJwtShouldBeAccepted() throws Exception {
        // Arrange
        String validToken = "valid-jwt-token";
        when(jwtService.validateMerchantToken(validToken, "test-merchant"))
            .thenReturn(true);
        when(jwtService.extractMerchantId(validToken))
            .thenReturn("test-merchant");
        
        // Act & Assert
        mockMvc.perform(get("/api/v1/payments/12345")
                .header("Authorization", "Bearer " + validToken))
            .andExpect(status().isOk());
    }
    
    @Test
    public void testExpiredJwtShouldBeRejected() throws Exception {
        // Arrange
        String expiredToken = "expired-jwt-token";
        when(jwtService.validateMerchantToken(expiredToken, "test-merchant"))
            .thenReturn(false);
        when(jwtService.extractMerchantId(expiredToken))
            .thenReturn("test-merchant");
        
        // Act & Assert
        mockMvc.perform(get("/api/v1/payments/12345")
                .header("Authorization", "Bearer " + expiredToken))
            .andExpect(status().isUnauthorized());
    }
    
    @Test
    public void testSecurityHeadersShouldBePresent() throws Exception {
        // Arrange
        MerchantEntity merchant = new MerchantEntity();
        merchant.setId("test-merchant-1");
        merchant.setName("Test Merchant");
        merchant.setApiKey("test-api-key");
        merchant.setStatus("ACTIVE");
        
        when(merchantRepository.findByApiKey("test-api-key"))
            .thenReturn(Optional.of(merchant));
        
        // Act & Assert
        mockMvc.perform(get("/api/v1/merchants/test-merchant-1")
                .header("X-API-Key", "test-api-key"))
            .andExpect(status().isOk())
            .andExpect(header().string("X-Frame-Options", "DENY"))
            .andExpect(header().string("X-Content-Type-Options", "nosniff"))
            .andExpect(header().exists("Strict-Transport-Security"))
            .andExpect(header().exists("Referrer-Policy"));
    }
    
    @Test
    public void testCorsConfigurationShouldWork() throws Exception {
        mockMvc.perform(post("/api/v1/payments")
                .header("Origin", "https://merchant-dashboard.example.com")
                .header("Access-Control-Request-Method", "POST")
                .header("Access-Control-Request-Headers", "X-API-Key, Content-Type"))
            .andExpect(status().isOk())
            .andExpect(header().string("Access-Control-Allow-Origin", "https://merchant-dashboard.example.com"))
            .andExpect(header().string("Access-Control-Allow-Methods", "GET,POST,PUT,DELETE,OPTIONS"))
            .andExpect(header().string("Access-Control-Allow-Headers", "X-API-Key,Authorization,Content-Type"));
    }
}